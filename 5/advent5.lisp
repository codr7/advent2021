(defun dec (v)
  (let ((count (length v))
	(out 0))
    (dotimes (i count)
      (incf out (ash (sbit v (- count i 1)) i)))
    out))

(defun trans (f in)
  (let* ((count (length (first in)))
	 (out (make-array count :element-type 'bit)))
    (dotimes (i count)
      (let ((n 0))
	(dolist (v in)
	  (incf n (sbit v i)))
	(setf (sbit out i) (funcall f n (length in)))))
    out))

(defun gamma (in)
  (trans (lambda (n c)
	   (if (> n (/ c 2)) 1 0))
	 in))

(defun epsilon (in)
  (trans (lambda (n c)
	   (if (> n (/ c 2)) 0 1))
	 in))

(defun power (in)
  (* (dec (gamma in)) (dec (epsilon in))))

(defun bits (s)
  (let* ((count (length s))
	 (out (make-array count :element-type 'bit)))
    (dotimes (i count)
      (setf (sbit out i) (- (char-code (char s i)) (char-code #\0))))
    out))

(defparameter *data* (list (bits "00100")
			   (bits "11110")
			   (bits "10110")
			   (bits "10111")
			   (bits "10101")
			   (bits "01111")
			   (bits "00111")
			   (bits "11100")
			   (bits "10000")
			   (bits "11001")
			   (bits "00010")
			   (bits "01010")))
  
(defun test ()
  (assert (= (power *data*)
	     198))
  
  (with-open-file (in "~/Projects/advent/5/input")
    (labels ((parse-input (out)
	       (let ((v (read-line in nil)))
		 (if v
		     (parse-input (cons (bits v) out))
		     (nreverse out)))))
      (let ((in (parse-input nil)))
	(format t "answer: ~a ~a~%" (length in) (power in))))))
